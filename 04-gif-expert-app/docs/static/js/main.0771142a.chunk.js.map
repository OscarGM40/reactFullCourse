{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","oldArray","category","existe","find","categoryValue","Swal","fire","title","icon","text","allowOutsideClick","allowEnterKey","allowEscapeKey","handleSetCategory","type","value","onChange","target","placeholder","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAgEeA,EA5DK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgDzC,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAMFN,GAAc,SAACO,GAAD,OA9BU,SAACA,EAAUC,GACnC,GAAKA,EAYE,CACL,IAAMC,EAASF,EAASG,MACtB,SAACC,GAAD,OAAmBA,IAAkBH,KAIvC,OADAL,EAAc,IACPM,EAAM,YAAOF,GAAP,CAAoBC,GAApB,mBAAgCD,IAP7C,OAVAK,IAAKC,KAAK,CACRC,MAAO,QACPC,KAAM,QACNC,KAAM,0BACNC,mBAAmB,EACnBC,eAAe,EACfC,gBAAgB,IAGlBhB,EAAc,IACP,YAAII,GAkBea,CAAkBb,EAAUL,OAIxD,SACE,uBAAOmB,KAAK,OAAOC,MAAOpB,EAAYqB,SA/ChB,SAAClB,GAEzBF,EAAcE,EAAEmB,OAAOF,QA8CrBG,YAAY,sB,gCCrDJC,EAAO,uCAAG,WAAQlB,GAAR,uBAAAmB,EAAA,6DACfC,EADe,iDAEuBC,UAAUrB,GAFjC,8DAIFsB,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRvB,MAAOsB,EAAItB,MACXc,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAXjB,kBAedM,GAfc,4CAAH,sDCYNM,EAZK,SAAC,GAAmB,EAAlBH,GAAmB,IAAhBvB,EAAe,EAAfA,MAAMc,EAAS,EAATA,IAI5B,OACG,sBAAKa,UAAU,yCAAf,UACG,qBAAKC,IAAKd,EAAKe,IAAK7B,IACpB,4BAAIA,QCcE8B,EAnBC,SAAC,GAAkB,IAAhBpC,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EAEbP,mBAAS,CAClCgC,KAAM,GACNY,SAAS,IAJ6B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAwBxC,OAhBAC,qBAAU,WAENC,YAAW,WAENvB,EAAQlB,GAAU0C,MACf,SAAAC,GAAI,OAAIJ,EAAS,CACdd,KAAMkB,EACNN,SAAS,SAIhB,OAEH,CAACrC,IAGCsC,EDrB0BM,CAAa5C,GAAjC8B,EAFmB,EAExBL,KAAaY,EAFW,EAEXA,QAErB,OACE,qCACE,6BAAKrC,IAEJqC,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEgBjBgB,EA5BM,WAAO,IAAD,EACWpD,mBAAS,CAAC,cADrB,mBAClBqD,EADkB,KACNtD,EADM,KAWzB,OACE,qCACE,oBAAIyC,UAAU,SAAd,4BACA,cAAC,EAAD,CAAazC,cAAeA,IAC5B,uBAEA,6BAEMsD,EAAWnB,KAAI,SAAC3B,GAAD,OACZ,cAAC,EAAD,CAAyBA,SAAUA,GAArBA,Y,MChB7B+C,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0771142a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    //console.log(e.target.value)\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * Validador antes de agregar un nuevo elemento en el array de categorias\r\n   *\r\n   * @param {Array} oldArray - Son todos los valores anteriores que estaban en el array\r\n   * @param { String } category - Es el nuevo valor a agregar como categoria\r\n   * @return { Array }  Nuevo array con la categoria\r\n   */\r\n  const handleSetCategory = (oldArray, category) => {\r\n    if (!category) {\r\n      Swal.fire({\r\n        title: \"Error\",\r\n        icon: \"error\",\r\n        text: \"Debes ingresar un texto\",\r\n        allowOutsideClick: false,\r\n        allowEnterKey: false,\r\n        allowEscapeKey: false,\r\n      });\r\n\r\n      setInputValue(\"\");\r\n      return [...oldArray];\r\n    } else {\r\n      const existe = oldArray.find(\r\n        (categoryValue) => categoryValue === category\r\n      );\r\n\r\n      setInputValue(\"\");\r\n      return existe ? [...oldArray] : [category,...oldArray];\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    /*   if(inputValue.trim().length > 2){\r\n     setCategories((cat) => [...cat,inputValue])\r\n     setInputValue('')\r\n      } */\r\n    setCategories((oldArray) => handleSetCategory(oldArray, inputValue));\r\n    //console.log(\"Submit hecho\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} \r\n      placeholder=\"Buscar gifs...\"/>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","\r\n\r\nexport  const getGifs = async ( category ) => {\r\n   const url =\r\n     `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=4&api_key=mSBe4KgXuI2eCZduwNIPriQqbmzIAlX5`;\r\n\r\n   const resp = await fetch(url);\r\n   const { data } = await resp.json();\r\n\r\n   const gifs = data.map((img) => {\r\n     return {\r\n       id: img.id,\r\n       title: img.title,\r\n       url: img.images?.downsized_medium.url,\r\n     };\r\n   });\r\n\r\n   return gifs;\r\n   \r\n }; ","import React from 'react'\r\n\r\nconst GifGridItem = ({id,title,url}) => {\r\n   \r\n   //console.log(id,title,url)\r\n\r\n   return (\r\n      <div className=\"card animate__animated animate__bounce\">\r\n         <img src={url} alt={title}></img>\r\n         <p>{title}</p>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default GifGridItem;\r\n\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  \r\n   const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n        \r\n      setTimeout(() => {\r\n           \r\n           getGifs(category).then(\r\n              imgs => setState({\r\n                 data: imgs,\r\n                 loading: false\r\n              })\r\n           )\r\n\r\n        },200)\r\n\r\n    }, [category]); \r\n\r\n\r\n  return state; //state es un objeto con un array y un boleano <- es el estado de este custom hook\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  /* const handleAdd = () => {\r\n   //Forma Uno: directamente lo asignamos\r\n    setCategories(\r\n      [ ...categories,\"Hunter X\"]); \r\n   //forma Dos: con una Arrow Function.muy util desde otro componente\r\n   setCategories(cats => [...cats,\"Hunter X\"])\r\n} */\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"titulo\">Gif Expert App</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n            categories.map((category) => (\r\n               <GifGrid key={category}  category={category} />\r\n        ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}